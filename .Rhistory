require(devtools)
install.packages(c("devtools", "testthat"))
require(devtools)
require(testthat)
options(error = NULL)
load_all()
test()
roxygen2::roxygenize()
build_vignettes()
require(devtools)
require(testthat)
options(error = NULL)
load_all()
test()
?modelrun
setwd("C:/Users/Mirko/Desktop/BayesRS.Problem")
graphics.off()
rm(list=ls(all=TRUE))
library(BayesFactor)
library(tidyr)
library(dplyr)
data <- read.table("timespan5.dat", header=FALSE)
names(data) <- c("id", "condition", "trial",
"time1", "time2", "time3", "time4", "time5", "time6", "time7",
"corr1", "corr2", "corr3", "corr4", "corr5", "corr6", "corr7")
# condition: 1 = fast, 2 = variable, long-short-long, 3 = variable, short-long-short, 4 = constant slow
data$pretime1 <- 0
data$pretime2 <- data$time1
data$pretime3 <- data$time2
data$pretime4 <- data$time3
data$pretime5 <- data$time4
data$pretime6 <- data$time5
data$pretime7 <- data$time6
cumtime <- as.data.frame(t(apply(data[, 4:10], MARGIN=1, FUN=cumsum)))
cumtime <- cbind(0, cumtime[,1:6])  # let them start at 0 and drop the last step (which is always 1 anyway) -> cumulative post-times rather than pre-times
names(cumtime) <- c("cumtime1", "cumtime2", "cumtime3", "cumtime4", "cumtime5", "cumtime6", "cumtime7")
data <- cbind(data, cumtime)
data$midtime <- (data$time3 + data$time4)/2
data$edgetime <- (data$time1 + data$time6)/2
data$pc <- rowMeans(data[,which(names(data)=="corr1"):which(names(data)=="corr7")])
datalong1 <- gather(data=data[,c(1:3, 11:17)], key="serpos", value="correct", 4:10)
datalong2 <- gather(data=data[,1:10], key="serpos", value="time", 4:10)
datalong3 <- gather(data=data[,c(1:3, 18:24)], key="serpos", value="pretime", 4:10)
datalong4 <- gather(data=data[,c(1:3, 25:31)], key="serpos", value="cumtime", 4:10)
datalong <- cbind(datalong2, datalong3$pretime, datalong4$cumtime, datalong1$correct)
names(datalong)[c(6,7,8)] <- c("pretime", "cumtime", "correct")
datalong$serpos <- as.numeric(sub("time", "", datalong$serpos))
table(datalong$condition, datalong$time)
datalong16 <- subset(datalong, serpos < 7)
table(datalong16$condition, datalong16$time)
datalong27 <- subset(datalong, serpos > 1)
###################### Some Stats #######################################
datalongVar <- subset(datalong, condition==2 | condition==3)  # only the variable interval conditions
datalongVar$condition <- as.factor(datalongVar$condition)
datalongVar$id <- as.factor(datalongVar$id)
datalongVar <- aggregate(correct ~ condition+id, data=datalongVar, FUN=mean)  # aggregate over serial positions
require(ggplot2)
ggplot(datalong27,aes(time,correct))+ stat_summary(fun.y=mean, geom="line", size=.5, aes(color=as.factor(condition))) +
stat_summary(fun.y=mean, geom="point", size=3.5, aes(color=as.factor(condition)))
ggplot(datalong27,aes(serpos,correct))+ stat_summary(fun.y=mean, geom="line", size=.5, aes(color=as.factor(condition))) +
stat_summary(fun.y=mean, geom="point", size=3.5, aes(color=as.factor(condition)))
BFmain <- lmBF(correct ~ condition + id, data=datalongVar, whichRandom="id")
BFid <- lmBF(correct ~ id, data=datalongVar, whichRandom="id")
BFcond <- BFmain/BFid
# There is an impression of a linear increase of accuracy with post-time, so zoom in on SP 1:6, variable conditions
datalong16Var <- subset(datalong16, condition==2 | condition==3)  # only the variable-interval conditions
datalong16Var$condition <- as.factor(datalong16Var$condition)
datalong16Var$id <- as.factor(datalong16Var$id)
agg16Var <- aggregate(correct ~ time+condition+id, data=datalong16Var, FUN=mean)
# data structure for BayesRS
dat.str <- data.frame(iv = c("time", "condition"),
type = c("cont", "cat"),
id = c(1,1))  # this variable needs to have the *name* of the subject variable!
ias.subject <- matrix(0, nrow=nrow(dat.str), ncol = nrow(dat.str))
#ias.subject[c(2)] <- 1
randvar.ia <- list(ias.subject)
require(rjags)
require(metRology)
require(reshape)
require(ggplot2)
out <- modelrun(data = agg16Var, dv = "correct", dat.str = dat.str, randvar.ia = randvar.ia,
nadapt = 5000, nburn = 5000, nsteps = 100000,
checkconv = 0, mcmc.save.indiv = 1)
out[[1]]
agg16VarSP <- aggregate(correct ~ time+condition+serpos+id, data=datalong16Var, FUN=mean)
agg16VarSP$csp <- agg16VarSP$serpos - 3.5   # center on mean
agg16VarSP$spsquared <- agg16VarSP$csp^2
dat.str <- data.frame(iv = c("time", "csp", "spsquared", "condition"),
type = c("cont", "cont", "cont", "cat"),
id = c(1,1,1,1))  # this variable needs to have the *name* of the subject variable!
ias.subject <- matrix(0, nrow=nrow(dat.str), ncol = nrow(dat.str))
ias.subject[2,1] <- 1  # need to define the pair-wise interactions for which random slopes are to be computed,
ias.subject[3,1] <- 1  # and they must be in the *lower* diagonal!
ias.subject[4,1] <- 1
ias.subject[3,2] <- 1
ias.subject[4,2] <- 1
ias.subject[4,3] <- 1
randvar.ia <- list(ias.subject)
outSP <- modelrun(data = agg16VarSP, dv = "correct", dat.str = dat.str, randvar.ia = randvar.ia,
nadapt = 1000, nburn = 2000, nsteps = 50000,
checkconv = 1, mcmc.save.indiv = 1)
outSP <- modelrun(data = agg16VarSP, dv = "correct", dat.str = dat.str, randvar.ia = randvar.ia,
nadapt = 1000, nburn = 2000, nsteps = 50000,
checkconv = 1, mcmc.save.indiv = 1, path='C:/Users/Mirko/Desktop/model1_t_sp.txt')
graphics.off()
rm(list=ls(all=TRUE))
library(BayesFactor)
# library(BayesRS)
library(tidyr)
library(dplyr)
data <- read.table("timespan5.dat", header=FALSE)
names(data) <- c("id", "condition", "trial",
"time1", "time2", "time3", "time4", "time5", "time6", "time7",
"corr1", "corr2", "corr3", "corr4", "corr5", "corr6", "corr7")
# condition: 1 = fast, 2 = variable, long-short-long, 3 = variable, short-long-short, 4 = constant slow
data$pretime1 <- 0
data$pretime2 <- data$time1
data$pretime3 <- data$time2
data$pretime4 <- data$time3
data$pretime5 <- data$time4
data$pretime6 <- data$time5
data$pretime7 <- data$time6
cumtime <- as.data.frame(t(apply(data[, 4:10], MARGIN=1, FUN=cumsum)))
cumtime <- cbind(0, cumtime[,1:6])  # let them start at 0 and drop the last step (which is always 1 anyway) -> cumulative post-times rather than pre-times
names(cumtime) <- c("cumtime1", "cumtime2", "cumtime3", "cumtime4", "cumtime5", "cumtime6", "cumtime7")
data <- cbind(data, cumtime)
data$midtime <- (data$time3 + data$time4)/2
data$edgetime <- (data$time1 + data$time6)/2
data$pc <- rowMeans(data[,which(names(data)=="corr1"):which(names(data)=="corr7")])
datalong1 <- gather(data=data[,c(1:3, 11:17)], key="serpos", value="correct", 4:10)
datalong2 <- gather(data=data[,1:10], key="serpos", value="time", 4:10)
datalong3 <- gather(data=data[,c(1:3, 18:24)], key="serpos", value="pretime", 4:10)
datalong4 <- gather(data=data[,c(1:3, 25:31)], key="serpos", value="cumtime", 4:10)
datalong <- cbind(datalong2, datalong3$pretime, datalong4$cumtime, datalong1$correct)
names(datalong)[c(6,7,8)] <- c("pretime", "cumtime", "correct")
datalong$serpos <- as.numeric(sub("time", "", datalong$serpos))
table(datalong$condition, datalong$time)
datalong16 <- subset(datalong, serpos < 7)
table(datalong16$condition, datalong16$time)
datalong27 <- subset(datalong, serpos > 1)
###################### Some Stats #######################################
datalongVar <- subset(datalong, condition==2 | condition==3)  # only the variable interval conditions
datalongVar$condition <- as.factor(datalongVar$condition)
datalongVar$id <- as.factor(datalongVar$id)
datalongVar <- aggregate(correct ~ condition+id, data=datalongVar, FUN=mean)  # aggregate over serial positions
# There is an impression of a linear increase of accuracy with post-time, so zoom in on SP 1:6, variable conditions
datalong16Var <- subset(datalong16, condition==2 | condition==3)  # only the variable-interval conditions
datalong16Var$condition <- as.factor(datalong16Var$condition)
datalong16Var$id <- as.factor(datalong16Var$id)
agg16Var <- aggregate(correct ~ time+condition+id, data=datalong16Var, FUN=mean)
# data structure for BayesRS
dat.str <- data.frame(iv = c("time", "condition"),
type = c("cont", "cat"),
id = c(1,1))  # this variable needs to have the *name* of the subject variable!
ias.subject <- matrix(0, nrow=nrow(dat.str), ncol = nrow(dat.str))
#ias.subject[c(2)] <- 1
randvar.ia <- list(ias.subject)
require(rjags)
require(metRology)
require(reshape)
require(ggplot2)
require(rjags)
require(metRology)
require(reshape)
source("modelrun.R")
source("modeltext.R")
source("plotPostMT_HDImeans2.R")
source("HDIofMCMC.R")
require(grid)
out <- modelrun(data = agg16Var, dv = "correct", dat.str = dat.str, randvar.ia = randvar.ia,
nadapt = 2000, nburn = 2000, nsteps = 10000,
checkconv = 0, mcmc.save.indiv = 1)
out[[1]]
agg16VarSP <- aggregate(correct ~ time+condition+serpos+id, data=datalong16Var, FUN=mean)
agg16VarSP$csp <- agg16VarSP$serpos - 3.5   # center on mean
agg16VarSP$spsquared <- agg16VarSP$csp^2
dat.str <- data.frame(iv = c("time", "csp", "spsquared", "condition"),
type = c("cont", "cont", "cont", "cat"),
id = c(1,1,1,1))  # this variable needs to have the *name* of the subject variable!
ias.subject <- matrix(0, nrow=nrow(dat.str), ncol = nrow(dat.str))
ias.subject[2,1] <- 1  # need to define the pair-wise interactions for which random slopes are to be computed,
ias.subject[3,1] <- 1  # and they must be in the *lower* diagonal!
ias.subject[4,1] <- 1
ias.subject[3,2] <- 1
ias.subject[4,2] <- 1
ias.subject[4,3] <- 1
randvar.ia <- list(ias.subject)
outSP <- modelrun(data = agg16VarSP, dv = "correct", dat.str = dat.str, randvar.ia = randvar.ia,
nadapt = 1000, nburn = 2000, nsteps = 10000,
checkconv = 1, mcmc.save.indiv = 1, path='C:/Users/Mirko/Desktop/model1_t_sp.txt')
dat.str_sp_t <- data.frame(iv = c("csp", "time", "condition"),
type = c("cont",  "cont", "cat"),
id = c(1,1,1))  # this variable needs to have the *name* of the subject variable!
dat.str_t_sp <- data.frame(iv = c("time", "csp", "condition"),
type = c("cont",  "cont", "cat"),
id = c(1,1,1))  # this variable needs to have the *name* of the subject variable!
ias.subject <- matrix(0, nrow=nrow(dat.str)-1, ncol = nrow(dat.str)-1)
ias.subject[2,1] <- 1  # need to define the pair-wise interactions for which random slopes are to be computed,
ias.subject[3,1] <- 1  # and they must be in the *lower* diagonal!
ias.subject[3,2] <- 1
randvar.ia <- list(ias.subject)
data = agg16VarSP
dv = "correct"
dat.str = dat.str_sp_t
randvar.ia = randvar.ia
checkconv = 1
mcmc.save.indiv = 1
corstr = NULL
plot.post = NULL
dic = NULL
path=NULL
outSPlin_sp_t <- modelrun(data = agg16VarSP, dv = "correct", dat.str = dat.str_sp_t, randvar.ia = randvar.ia,
nadapt = 1000, nburn = 1000, nsteps = 10000,
checkconv = 1, mcmc.save.indiv = 1)
data(bayesrsdata) #load data
require(devtools)
require(testthat)
require(R.rsp)
options(error = NULL)
load_all()
test()
roxygen2::roxygenize()
build_vignettes()
setwd("~/GitHub/BayesRS")
require(devtools)
require(testthat)
require(R.rsp)
options(error = NULL)
load_all()
test()
roxygen2::roxygenize()
build_vignettes()
data(bayesrsdata) #load data
nadapt = 100         # number of adaptation steps
nburn = 10           # number of burn-in samples
mcmcstep = 500       # number of saved mcmc samples, min. should be 100'000
# Define model structure;
dat.str <- data.frame(iv = c("x.time"),
type = c("cont"),
subject = c(1))
# name of random variable (here 'subject') needs to match data frame
# Run modelrun function
out <- modelrun(data = bayesrsdata,
dv = "y",
dat.str = dat.str,
nadapt = nadapt,
nburn = nburn,
nsteps = mcmcstep,
checkconv = 0)
data = bayesrsdata
dv = "y"
nsteps = mcmcstep
checkconv = 0
randvar.ia = NULL
corstr = NULL
mcmc.save.indiv = NULL
plot.post = NULL
dic = NULL
path=NULL
if (is.null(nadapt) ) nadapt=2000
if (is.null(nburn) ) nburn=2000
if (is.null(nsteps) ) nsteps=100000
if (is.null(checkconv) ) checkconv=1
if (is.null(mcmc.save.indiv)) mcmc.save.indiv = 0
if (is.null(plot.post)) plot.post=0
if (is.null(dic)) dic=0
if (is.null(path)) path=file.path(tempdir(), "model.txt")
if (!is.null(randvar.ia) & nrow(randvar.ia[[1]])!=nrow(dat.str)|ncol(randvar.ia[[1]])!=nrow(dat.str)){
stop("nr. of independent variables in dat.str and randvar.ia have to match")
}
randvar.ia
!is.null(randvar.ia)
)) path=file.path(tempdir(), "model.txt")
if (!is.null(randvar.ia
!is.null(randvar.ia)
!is.null(randvar.ia)
