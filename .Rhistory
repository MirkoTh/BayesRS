multicol <- rep(list(1),nrand)
for (i in 1:nrand){
threshold <- 1
test <- which(corstr[[i]]==1, arr.ind = TRUE)
tab <- table(test)
tmp <- as.numeric(names(tab)[tab == threshold])
if (length(tmp)!=0){
biv.low <- sort(tmp)[1:(length(tmp)/2)]
biv.up <- sort(tmp)[floor((length(tmp)/2)+1):length(tmp)]
bivar[[i]] <- matrix(c(biv.low, biv.up), ncol= 2,byrow = TRUE)
}
tmp <- as.numeric(names(tab)[tab > threshold])
if (length(tmp)>=0){
multicol[[i]] <- max(length(tmp),multicol[[i]])
if (length(tmp)!=0){
multivar[[i]] <- matrix(as.numeric(names(tab)[tab > threshold]), nrow = 1, byrow = TRUE)
} else { multivar[i] <- list(NULL)}
}
}
tau0g<- vector("list",nrand)
sigma0<-vector("list",nrand)
mu0g <- vector("list",nrand)
for (i in 1:length(randvar)){
if (all(multivar[[i]]!=1)&all(bivar[[i]]!=1)){
tau0g[[i]] <- paste("tau0g", ".", randvar[i], sep = '')
sigma0[[i]] <- paste("sigma0", ".", randvar[i], sep = '')
}
}
bimultivar <- mapply(cbind,multivar,bivar,SIMPLIFY=FALSE)
ind<-lapply(bimultivar,function(x)sum(x==1))
for(i in 1:length(multivar)){
if(any(as.logical(unlist(ind)))){
if (ind[[i]]==0){
mu0g[[i]] <- "mu.corr[1]"
}
} else{
mu0g[[i]]<-"mu0g"
}
}
# random intercept
for (i in 1:nrand){
corrcount <- 0
if (all(multivar[[i]]!=1) & all(bivar[[i]]!=1)){
bI[[i]][[1]] <- paste("b", randvar[i], "[", randvar[i],"[i]]", sep = '')
bI[[i]][[2]] <- paste("b", randvar[i], "[n]", sep = '')
bI[[i]][[3]] <- paste("b", randvar[i], sep = '')
} else {
if (any(multivar[[i]]==1)){
tmp <- which(multivar[[i]]==1)[1]
corrcount <- corrcount + 1
bI[[i]][[1]] <- paste("b", randvar[i], paste(multivar[[i]][tmp,], collapse = ''),
"[", randvar[i],"[i],",corrcount, "]" , sep = '')
bI[[i]][[2]] <- paste("b", randvar[i], paste(multivar[[i]][tmp,], collapse = ''),  "[n", ",", corrcount, "]", sep = '')
bI[[i]][[3]] <- paste("b", randvar[i], paste(multivar[[i]][tmp,], collapse = ''), sep = '')
}
if (any(bivar[[i]] == 1)){
tmp <- which(bivar[[i]]==1 ,arr.ind = TRUE)[1]
corrcount <- corrcount + 1
bI[[i]][[1]] <- paste("b", randvar[i], paste(bivar[[i]][tmp,], collapse = ''),
"[", randvar[i],"[i],",corrcount, "]" , sep = '')
bI[[i]][[2]] <- paste("b", randvar[i], paste(bivar[[i]][tmp,], collapse = ''),  "[n", ",", corrcount, "]", sep = '')
bI[[i]][[3]] <- paste("b", randvar[i], paste(bivar[[i]][tmp,], collapse = ''), sep = '')
}
}
}
# where are the intercepts?
tmp.multi<-unlist(lapply(multivar,FUN=function(x)sum(x==1)))
tmp.bi<-unlist(lapply(bivar,FUN=function(x)sum(x==1)))
corrcount <- matrix(c(tmp.multi,tmp.bi),byrow = TRUE,nrow = 2)
# random slopes and group parameters
contcount <- matrix(0,nrow = nrcont, ncol = nrand)
nhclcont <- rep(0,times = nrcont)
if (nrcont > 0){
for (ncont in 1:nrcont){
onlyfix <- 0
if(conthcl[ncont] == 1){
for (i in which(dat.str[dat.str$type == "cont",][ncont,3:ncol(dat.str)]==1)){
if (all(multivar[[i]]!=1+ncont) & all(bivar[[i]]!=1+ncont)){
bcont[[ncont]][i,1] <- paste("b", cont[ncont], ".", randvar[i],"[", randvar[i],"[i]]",
" * x", cont[ncont], "[i]", sep = "")
bcont[[ncont]][i,2] <- paste("b", cont[ncont], ".", randvar[i],"[n]", sep = "")
bcont[[ncont]][i,3] <- paste("b", cont[ncont], ".", randvar[i], sep = "")
contcount[ncont,i] <- contcount[ncont,i] + 1
} else {
if (any(multivar[[i]]==(1+ncont))){
tmp <- which(multivar[[i]]==1+ncont, arr.ind = TRUE)[1]
corrcount[1,i] <- corrcount[1,i] + 1
bcont[[ncont]][i,1] <- paste("b", randvar[i], paste(multivar[[i]][tmp,], collapse = ''),"[",
randvar[i],"[i],",corrcount[1,i], "]", " * x", cont[ncont], "[i]", sep = "")
bcont[[ncont]][i,2] <- paste("b", randvar[i], paste(multivar[[i]][tmp,], collapse = ''), "[n", ",", corrcount[1,i], "]", sep = "")
bcont[[ncont]][i,3] <- paste("b", randvar[i], paste(multivar[[i]][tmp,], collapse = ''), sep = "")
} else if (any(bivar[[i]] == (1+ncont))){
tmp <- which(bivar[[i]]==(1+ncont) ,arr.ind = TRUE)[1]
corrcount[2,i] <- corrcount[2,i] + 1
bcont[[ncont]][i,1] <- paste("b", randvar[i], paste(bivar[[i]][tmp,], collapse = ''),"[",
randvar[i],"[i],",corrcount[2,i], "]", " * x", cont[ncont], "[i]", sep = "")
bcont[[ncont]][i,2] <- paste("b", randvar[i], paste(bivar[[i]][tmp,], collapse = ''), "[n", ",", corrcount[2,i], "]", sep = "")
bcont[[ncont]][i,3] <- paste("b", randvar[i], paste(bivar[[i]][tmp,], collapse = ''), sep = "")
}
}
}
} else {mucont[[1]][[ncont]] <- paste("mu", cont[ncont]," * x", cont[ncont], "[i]", sep = "")
onlyfix <- 1}
if (all(unlist(multivar)!=(1+ncont)) & all(unlist(bivar)!=(1+ncont))){
mucont[[2]][[ncont]] <- paste("mu", cont[ncont], sep = "")
# plus pre for rescaling as cauchy
precont[[ncont]] <- paste("pre", cont[ncont], sep = "")
if (conthcl[ncont]!=1){nhclcont[ncont] <- 1}
for (i in which(dat.str[dat.str$type == "cont",][ncont,3:ncol(dat.str)]==1)){
taucont[ncont,i] <- paste("tau", cont[ncont], ".", randvar[i], sep = "")
# plus sigma for rescaling prec as sd
sigmacont[ncont,i] <- paste("sigma", cont[ncont], ".", randvar[i], sep = "")
}}
# random slopes for cat pred only when required
if (onlyfix == 0 &  sum(contcount) != sum(dat.str[dat.str$type == "cont",][1:ncont,3:ncol(dat.str)]==1)){
mucont[[2]][ncont] <- paste0("mu.corr[", (1+ncont),"]")
for(i in which(contcount == 1, arr.ind = TRUE)[2])
taucont[ncont,i] <- paste("tau", cont[ncont], ".", randvar[i], sep = "")
# plus sigma for rescaling prec as sd
sigmacont[ncont,i] <- paste("sigma", cont[ncont], ".", randvar[i], sep = "")
}
}
pl.pre <- contcount
}else{bcont <- rm(bcont); mucont <- list(NA, NA); precont <- rm(precont); taucont <- rm(taucont); sigmacont <- rm(sigmacont)}
catcount <- matrix(0,nrow = nrcat, ncol = nrand)
nhclcat <- rep(0,times = nrcat)
if (nrcat > 0){
for (ncat in 1:nrcat){
onlyfix <- 0
# random slopes for continuous predictors
if(cathcl[ncat] == 1){
# nrs <- which(dat.str[dat.str$type == "cat",][ncat,3:ncol(dat.str)]==1)
# nrs <- unique(which(as.matrix(dat.str[dat.str$type == "cat",][,3:ncol(dat.str)]==1),arr.ind = TRUE)[,2])
# for (i in nrs){
for (i in which(dat.str[dat.str$type == "cat",][ncat,3:ncol(dat.str)]==1)){
if (all(multivar[[i]]!=(1+ncont+ncat)) & all(bivar[[i]]!=(1+ncont+ncat))){
bcat[[ncat]][i,1]  <- paste("b", cat[ncat], ".", randvar[i], "[", randvar[i],"[i]]", " * x", cat[ncat], "[i]", sep = "")
bcat[[ncat]][i,2] <- paste("b", cat[ncat], ".", randvar[i], "[n]", sep = "")
bcat[[ncat]][i,3] <- paste("b", cat[ncat], ".", randvar[i], sep = "")
catcount[ncat, i] <- catcount[ncat, i] + 1
} else {
if (any(multivar[[i]]==(1+ncont+ncat))){
tmp <- which(multivar[[i]]==(1+ncont+ncat), arr.ind = TRUE)[1]
corrcount[1,i] <- corrcount[1,i] + 1
bcat[[ncat]][i,1]  <- paste("b", randvar[i],paste(multivar[[i]][tmp,], collapse = ''),
"[", randvar[i],"[i],",corrcount[1,i], "]", " * x", cat[ncat], "[i]", sep = "")
bcat[[ncat]][i,2] <- paste("b", randvar[i],paste(multivar[[i]][tmp,], collapse = ''), "[n", ",", corrcount[1,i], "]", sep = "")
bcat[[ncat]][i,3] <- paste("b", randvar[i],paste(multivar[[i]][tmp,], collapse = ''), sep = "")
} else if (any(bivar[[i]]==(1+ncont+ncat))){
tmp <- which(bivar[[i]]==(1+ncont+ncat), arr.ind = TRUE)[1]
corrcount[2,i] <- corrcount[2,i] + 1
bcat[[ncat]][i,1]  <- paste("b", randvar[i],paste(bivar[[i]][tmp,], collapse = ''),"[",
randvar[i],"[i],",corrcount[2,i], "]", " * x", cat[ncat], "[i]", sep = "")
bcat[[ncat]][i,2] <- paste("b", randvar[i],paste(bivar[[i]][tmp,], collapse = ''), "[n", ",",
corrcount[2,i], "]", sep = "")
bcat[[ncat]][i,3] <- paste("b", randvar[i],paste(bivar[[i]][tmp,], collapse = ''), sep = "")
}
}
}
} else {mucat[[1]][ncat] <- paste("mu", cat[ncat]," * x", cat[ncat], "[i]", sep = "")
onlyfix <- 1}
if (all(unlist(multivar)!=(1+nrcont+ncat)) & all(unlist(bivar)!=(1+nrcont+ncat))){
mucat[[2]][[ncat]] <- paste("mu", cat[ncat], sep = "")
# plus pre for rescaling as cauchy
precat[[ncat]] <- paste("pre", cat[ncat], sep = "")
if (cathcl[ncat]!=1){nhclcat[ncat] <- 1}
for (i in which(dat.str[dat.str$type == "cat",][ncat,3:ncol(dat.str)]==1)){
taucat[ncat,i] <- paste("tau", cat[ncat], ".", randvar[i], sep = "")
# plus sigma for rescaling prec as sd
sigmacat[ncat,i] <- paste("sigma", cat[ncat], ".", randvar[i], sep = "")
}
}
if (onlyfix == 0 &   sum(catcount) != sum(dat.str[dat.str$type == "cat",][1:ncat,3:ncol(dat.str)]==1)){
mucat[[2]][ncat] <- paste0("mu.corr[", (1+nrcont+ncat),"]")
for(i in which(catcount == 1, arr.ind = TRUE)[2])
taucat[ncat,i] <- paste("tau", cat[ncat], ".", randvar[i], sep = "")
# plus sigma for rescaling prec as sd
sigmacat[ncat,i] <- paste("sigma", cat[ncat], ".", randvar[i], sep = "")
}
}
}else{bcat <- rm(bcat); mucat <- list(NA, NA); precat <- rm(precat); taucat <- rm(taucat); sigmacat <- rm(sigmacat) }
pl.pre <- rbind(pl.pre, catcount)
pl.ind <- rowSums(pl.pre) == nrand
# covariance structure if required
bi.yes <- which(lapply(bivar,length)>0)
multi.yes <- which(lapply(multivar, length)>0)
multipart <- replicate(nrand, matrix(NA,nrow = (max(lengths(multivar))), ncol = 1), simplify=F)
bipart <- replicate(nrand, matrix(NA,nrow = (max(lengths(bivar))/2), ncol = 1), simplify=F)
# multivar<-lapply(multivar,function(x)as.matrix(x))
# bivar<-lapply(bivar,function(x)as.matrix(x))
for (i in multi.yes){
for (j in 1:nrow(multivar[[i]])){
multipart[[i]][j,] <- paste("b",randvar[i],paste(unique(multivar[[i]][j,]), collapse = ""),
"[n, 1:",length(multivar[[i]]),
"] ~ dmnorm (mu.corr[c(",paste(unique(multivar[[i]][j,]), collapse = ","),")]",
", SigmaInv",randvar[i],paste(unique(multivar[[i]][j,]), collapse = ""),
"[1:",length(multivar[[i]]),",1:",length(multivar[[i]]),"])","\n", sep = "")
}
}
for (i in bi.yes){
for (j in 1:nrow(bivar[[i]])){
bipart[[i]][j,] <- paste("b",randvar[i],paste(unique(bivar[[i]][j,]), collapse = ""),
"[n, 1:",length(bivar[[i]][j,]),
"] ~ dmnorm (mu.corr[c(",paste(unique(bivar[[i]][j,]), collapse = ","),")]",
", SigmaInv", randvar[i],paste(as.vector(unique(bivar[[i]][j,])), collapse = ""),
"[1:", length(bivar[[i]][j,]),",1:", length(bivar[[i]][j,]),"])","\n", sep = "")
}
}
bipart <- lapply(bipart, function(x) x[!is.na(x)])
multipart <- lapply(multipart, function(x) x[!is.na(x)])
mupart.corr <- NA
pre.corr <- NA
sigmainv.corr <- NA
sigma.corr <- NA
wishdf <- NA
corr.names<-NA
for (both in union(unique(unlist(multivar)),unique(unlist(bivar)))){
if (both == 1){
mupart.corr <- append(mupart.corr, paste("mu.corr[", both, "] ~ dnorm(0,1)","\n", sep = ""))
} else {
mupart.corr <- append(mupart.corr, paste("mu.corr[", both, "] <- pre", both, "* scale",
c("cont","cat")[1+as.numeric(both>(nrcont+1))],"\n", sep = ""))
pre.corr <- append(pre.corr, paste("pre", both, " ~ dt(0,1,1)","\n", sep = ""))
corr.names<-c(corr.names,as.character(dat.str$iv[both-1]))
}
}
corr.names<-corr.names[!is.na(corr.names)]
mupart.corr <- mupart.corr[!is.na(mupart.corr)]
pre.corr <- pre.corr[!is.na(pre.corr)]
Icount <- 1
rho <- NA
RHO <- NA
for (i in 1:length(bivar)){
if (!is.null(bivar[[i]])){
for (j in 1:nrow(bivar[[i]])){
long <- length(bivar[[i]][j,])
sigmainv.corr <- append(sigmainv.corr, paste0("SigmaInv",randvar[i],paste(unique(bivar[[i]][j,]), collapse = ""),
"[1:",long, ",1:",long, "] ~ dwish(I",
Icount,"[1:",
long, ",1:",long, "],", long+1,")","\n"))
reqsigma <- paste0("Sigma",randvar[i],paste(unique(bivar[[i]][j,]), collapse = ""))
sigma.corr <- append(sigma.corr, paste0(reqsigma,
"[1:",long, ",1:",long, "] <- inverse(",
"SigmaInv",randvar[i],paste(unique(bivar[[i]][j,]), collapse = ""),
"[1:",long, ",1:",long, "])","\n"))
rho <- append(rho, paste0("for (i1 in 1:", long, "){\n for(i2 in 1:", long, "){rho",
paste0(randvar[i],paste(unique(bivar[[i]][j,]), collapse = "")),
"[i1,i2] <- ", reqsigma, "[i1,i2]/sqrt(", reqsigma, "[i1,i1] *", reqsigma, "[i2,i2])\n}\n}"))
RHO <- append(RHO, paste0("rho", paste0(randvar[i],paste(unique(bivar[[i]][j,]), collapse = ""))))
Icount <- Icount + 1
wishdf <- c(wishdf, long)
}
}
}
for (i in 1:length(multivar)){
if (!is.null(multivar[[i]])){
for (j in 1:nrow(multivar[[i]])){
long <- length(multivar[[i]][j,])
sigmainv.corr <- append(sigmainv.corr, paste0("SigmaInv",randvar[i],paste(unique(multivar[[i]][j,]), collapse = ""),
"[1:",long, ",1:",long, "] ~ dwish(I", Icount,"[1:",
long, ",1:",long, "],", long+1,")","\n"))
reqsigma <- paste0("Sigma",randvar[i],paste(unique(multivar[[i]][j,]), collapse = ""))
sigma.corr <- append(sigma.corr, paste0(reqsigma,
"[1:",long, ",1:",long, "] <- inverse(",
"SigmaInv",randvar[i],paste(unique(multivar[[i]][j,]), collapse = ""),
"[1:",long, ",1:",long, "])","\n"))
rho <- append(rho, paste0("for (i1 in 1:", long, "){\n for(i2 in 1:", long, "){rho",
paste0(randvar[i],paste(unique(multivar[[i]][j,]), collapse = "")),
"[i1,i2] <- ", reqsigma, "[i1,i2]/sqrt(", reqsigma, "[i1,i1] *", reqsigma, "[i2,i2])\n}\n}"))
RHO <- append(RHO, paste0("rho", paste0(randvar[i],paste(unique(multivar[[i]][j,]), collapse = ""))))
Icount <- Icount + 1
wishdf <- c(wishdf, long)
}
}
}
sigmainv.corr <- sigmainv.corr[!is.na(sigmainv.corr)]
sigma.corr <- sigma.corr[!is.na(sigma.corr)]
wishdf <- wishdf[!is.na(wishdf)]
RHO <- RHO[!is.na(RHO)]
rho <- rho[!is.na(rho)]
ia.purecont<-vector()
if (nrcat & nrcont > 0){
counter <- 0
for (ncont in 1:(nrcont+nrcat-1)){
for (ncat in (ncont+1):(nrcont+nrcat)){
counter <- counter + 1
#
if(sum(startsWith(x = c(allnames[ncont],allnames[ncat]), prefix = substr(allnames[ncont],start = 1, stop = nchar(allnames[ncont])-1)))==2 &
grepl(pattern=".spl",x=allnames[ncont]) & grepl(pattern=".spl",x=allnames[ncat])){
}else{
for (i in 1:nrand){
if(randvar.ia[[i]][ncat,ncont] == 1){
bIAs[[counter]][i,1] <- paste("b", allnames[ncont], "x", allnames[ncat], ".", randvar[i], "[", randvar[i],"[i]]",
" * x", allnames[ncont], "[i]"," * x", allnames[ncat], "[i]", sep = "")
bIAs[[counter]][i,2] <- paste("b", allnames[ncont], "x", allnames[ncat], ".", randvar[i], "[n]", sep = "")
bIAs[[counter]][i,3] <- paste("b", allnames[ncont], "x", allnames[ncat], ".", randvar[i], sep = "")
tauIAs[counter,i] <- paste("tau", allnames[ncont], "x", allnames[ncat], ".", randvar[i], sep = "")
# plus sigma for rescaling prec as sd
sigmaIAs[counter,i] <- paste("sigma", allnames[ncont], "x", allnames[ncat], ".", randvar[i], sep = "")
} else {muIAs[[1]][[counter]] <- paste("mu", allnames[ncont],"x", allnames[ncat], " * x",
allnames[ncont],"[i]", " * x", allnames[ncat],"[i]", sep = "")}
muIAs[[2]][counter]<- paste("mu", allnames[ncont], "x", allnames[ncat], sep = "")
# preIAs <- append(preIAs, paste("pre", allnames[ncont], "x", allnames[ncat],  sep = ""))
}
preIAs <- append(preIAs, paste("pre", allnames[ncont], "x", allnames[ncat],  sep = ""))
}
if(ncont<=nrcont&ncat<=nrcont){
ia.purecont<-c(ia.purecont,1)
} else{ia.purecont<-c(ia.purecont,0)}
}}
preIAs <- preIAs[2:length(preIAs)]
} else{muIAs <- rm(muIAs); preIAs <- rm(preIAs); tauIAs <- rm(tauIAs); sigmaIAs <- rm(sigmaIAs)}
ia.purecont
muIAs
rm(list=ls(all=TRUE))
load("E3.subs.pertrial.Rda")
data<-ssqt_ptrial
#### simulation and mcmc parameters ####
# mcmc values
nadapt <- 100
nburn <- 100
nsteps <- 250
data$cont2<-rnorm(nrow(data),mean = 0,sd=1)
#### data info for model ####
# first enter continuous variables, then categorical ones
dat.str <- data.frame(iv = c("Setsize", "cont2", "Condition"),
type = c("cont", "cont", "cat"),
subject = c(1,1,1))
ias.subject <- matrix(0, nrow=nrow(dat.str), ncol = nrow(dat.str))
ias.subject[c(2,3,6)] <- 1
randvar.ia <- list(ias.subject)
cor.subject <- matrix(0, nrow=nrow(dat.str)+1, ncol = nrow(dat.str)+1)
cor.subject[c(2,3,4,7,8,12)] <- 1
corstr <- list(cor.subject)
data$Setsize<-as.numeric(as.character(data$Setsize))
recvars <- which(names(data) %in% c("subject", "Condition"))
data[,recvars] <- lapply(data[,recvars], as.factor)
# data ok?
require(ggplot2)
require(grid)
# x11()
pl <- ggplot(data, aes(round(cont2/1), RT, group = Condition)) +
stat_summary(fun.y = mean, geom = "line", aes(colour = Condition)) +
theme(legend.position = "bottom")
#facet_wrap(~ subject, nrow = 5)+
grid.draw(pl)
#### run model with correlations ####
checkconv = 0
mcmc.save.indiv = 1
dv = "RT"
plot.post = NULL
dic = NULL
source("modelrun.R")
out <- modelrun(data = data, dv = "RT", dat.str = dat.str, randvar.ia = randvar.ia, nadapt = nadapt, nburn = nburn,
nsteps = nsteps, checkconv = 1, mcmc.save.indiv = 1, corstr=corstr, plot.post = 1,dic = 1)
source('//130.60.233.122/apk-home/Users/Mirko Thalmann/Statistik/BayesRS/addon.testing/bfp.test.overestimation.R')
source('//130.60.233.122/apk-home/Users/Mirko Thalmann/Statistik/BayesRS/addon.testing/comp.lmbf.savdick.fixed.R')
source('//130.60.233.122/apk-home/Users/Mirko Thalmann/Statistik/BayesRS/addon.testing/corr.rand.effects.R')
source('//130.60.233.122/apk-home/Users/Mirko Thalmann/Statistik/BayesRS/addon.testing/corr.rand.effects_only.one.R')
source('//130.60.233.122/apk-home/Users/Mirko Thalmann/Statistik/BayesRS/addon.testing/exemplary_data_1random.R')
source('//130.60.233.122/apk-home/Users/Mirko Thalmann/Statistik/BayesRS/addon.testing/exemplary_data_1random_same.var.names.R')
source('//130.60.233.122/apk-home/Users/Mirko Thalmann/Statistik/BayesRS/addon.testing/exemplary_data_2random.R')
source('//130.60.233.122/apk-home/Users/Mirko Thalmann/Statistik/BayesRS/addon.testing/exemplary_data_3random.R')
source('//130.60.233.122/apk-home/Users/Mirko Thalmann/Statistik/BayesRS/addon.testing/stability.BF.effectsize.moresamples.R')
source('//130.60.233.122/apk-home/Users/Mirko Thalmann/Statistik/BayesRS/addon.testing/test#1.cat4.cont3.R')
source('//130.60.233.122/apk-home/Users/Mirko Thalmann/Statistik/BayesRS/addon.testing/test#2.cat4.2xcont.R')
source('//130.60.233.122/apk-home/Users/Mirko Thalmann/Statistik/BayesRS/addon.testing/test#3.2xcatmulti.1xcont.R')
source('//130.60.233.122/apk-home/Users/Mirko Thalmann/Statistik/BayesRS/addon.testing/test#5.2xcatmulti.2xcont.2xrand.R')
source('//130.60.233.122/apk-home/Users/Mirko Thalmann/Statistik/BayesRS/addon.testing/test#4.2xcatmulti.1xcont.2xrand.R')
source('//130.60.233.122/apk-home/Users/Mirko Thalmann/Statistik/BayesRS/addon.testing/test#5.2xcatmulti.2xcont.2xrand.R')
source('//130.60.233.122/apk-home/Users/Mirko Thalmann/Statistik/BayesRS/addon.testing/test#6.2xcatmulti.2xcont.2xrand.R')
source('//130.60.233.122/apk-home/Users/Mirko Thalmann/Statistik/BayesRS/addon.testing/test#7dataLea.R')
source('//130.60.233.122/apk-home/Users/Mirko Thalmann/Statistik/BayesRS/addon.testing/ttest.benchmark.R')
roxygen2::roxygenize()
setwd("//130.60.233.122/labs/Labs/Mirko/BayesRS/R.package/package/BayesRS")
roxygen2::roxygenize()
require(devtools)
require(testthat)
options(error = NULL)
load_all()
data(bayesrsdata) #load data
nadapt = 1000           # number of adaptation steps
nburn = 1000            # number of burn-in samples
mcmcstep = 1000       # number of saved mcmc samples
dat.str <- data.frame(iv = c("x.time"),
type = c("cont"),
subject = c(1)) # name of random variable (here 'subject') needs to match data frame
# Run modelrun function
out <- modelrun(data = bayesrsdata,
dv = "y",
dat.str = dat.str,
nadapt = nadapt,
nburn = nburn,
nsteps = mcmcstep,
checkconv = 0)
roxygen2::roxygenize()
require(devtools)
require(testthat)
options(error = NULL)
load_all()
data(bayesrsdata) #load data
nadapt = 1000           # number of adaptation steps
nburn = 1000            # number of burn-in samples
mcmcstep = 1000       # number of saved mcmc samples
out <- modelrun(data = bayesrsdata,
dv = "y",
dat.str = dat.str,
nadapt = nadapt,
nburn = nburn,
nsteps = mcmcstep,
checkconv = 0)
dat.str <- data.frame(iv = c("x.time"),
type = c("cont"),
subject = c(1)) # name of random variable (here 'subject') needs to match data frame
out <- modelrun(data = bayesrsdata,
dv = "y",
dat.str = dat.str,
nadapt = nadapt,
nburn = nburn,
nsteps = mcmcstep,
checkconv = 0)
out[[1]]
dat.str <- data.frame(iv = c("x.time", "x.domain"), #order: continuous variable(s) needs to go first
type = c("cont", "cat"),
subject = c(1,1)) # name of random variable (here 'subject') needs to match data frame
ias.subject <- matrix(0, nrow=nrow(dat.str), ncol = nrow(dat.str))
ias.subject[c(2)] <- 1
randvar.ia <- list(ias.subject)
cor.subject <- matrix(0, nrow=nrow(dat.str)+1, ncol = nrow(dat.str)+1)
cor.subject[c(2,3,6)] <- 1
corstr <- list(cor.subject)
out <- modelrun(data = bayesrsdata,
dv = "y",
dat.str = dat.str,
randvar.ia = randvar.ia,
nadapt = nadapt,
nburn = nburn,
nsteps = mcmcstep,
checkconv = 0,
mcmc.save.indiv = 1,
corstr = corstr,
plot.post = 1)
R.version
if(!require(installr)) {
install.packages("installr"); require(installr)}
updateR()
R.version
Sys.setenv(PATH = paste("C:/Rtools/bin", Sys.getenv("PATH"), sep=";"))
Sys.setenv(BINPREF = "C:/Rtools/mingw_$(WIN)/bin/")
PATH="C:\Rtools\bin;${PATH}"
devtools::find_rtools
require(devtools)
install.packages("grid")
checkconv = 1
#facet_wrap(~ subject, nrow = 5)+
require(grid)
install.packages(c("ggplot2", "gridExtra", "BayesFactor", "reshape"))
install.packages(c("rjags", "metRology"))
install.packages(c("tidyr", "dplyr"))
install.packages("MASS")
require(stats)
install.packages("coda")
devtools::find_rtools
require(devtools)
require(testthat)
options(error = NULL)
load_all()
test()
roxygen2::roxygenize()
build_vignettes()
devtools::document()
install.packages("R.rsp")
require(R.rsp)
R CMD check
devtools::check()
devtools::check()
require(devtools)
require(testthat)
require(R.rsp)
R CMD check
update.packages(ask = FALSE, checkBuilt = TRUE)
R CMD check BayesRS
require(devtools)
require(testthat)
require(R.rsp)
options(error = NULL)
load_all()
require(devtools)
require(testthat)
require(R.rsp)
options(error = NULL)
load_all()
test()
roxygen2::roxygenize()
build_vignettes()
devtools::check()
require(devtools)
require(testthat)
require(R.rsp)
options(error = NULL)
load_all()
test()
roxygen2::roxygenize()
build_vignettes()
R CMD build BayesRS
getwd()
require(Rtools)
setwd("~/GitHub")
setwd("~/GitHub")
library(testthat)
library(BayesRS)
test_check("BayesRS")
